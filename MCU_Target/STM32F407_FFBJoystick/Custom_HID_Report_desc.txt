
#define REPORT_ID_LOG_IN	1
#define REPORT_ID_CONFIG_IN		2
#define REPORT_ID_CONFIG_OUT	3

/** Usb CUSTOM HID report descriptor. */
__ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
{

	0x06, 0x00, 0xFF, 			//Usage Page (Vendor-Defined 1)
 	0x09, 0x01, 				//Usage (Vendor-Defined 1)
 	0xA1, 0x01, 				//Collection (Application)
	0x15, 0x00, 			    //Logical Minimum (0)
	0x26, 0xFF, 0x00,			//Logical Maximum (255)
	0x85, REPORT_ID_LOG_IN, 	//REPORT_ID (1)
	0x75, 0x08,					//Report Size (8)
	0x95, 0x40,					//Report Count (64)
	0x09, 0x01,					//Usage (Vendor-Defined 1)
	0x81, 0x02,					//Input (Data,Var,Abs,NWrp,Lin,Pref,NNul,Bit)
	0x09, 0x01,					//Usage (Vendor-Defined 1)
	0x75, 0x08,					//Report Size (8)
	0x95, 0x40,					//Report Count (64)
	0x91, 0x02,					//Output (Data,Var,Abs,NWrp,Lin,Pref,NNul,NVol,Bit)
	// 30 Bytes
	0x85, REPORT_ID_CONFIG_IN,  //REPORT_ID (2)
    0x75, 0x08,					//Report Size (8)
    0x95, 0x40,					//Report Count (64)
    0x09, 0x02,					//Usage (Vendor-Defined 2)
    0x81, 0x02,					//Input (Data,Var,Abs,NWrp,Lin,Pref,NNul,Bit)
	0x09, 0x02,					//Usage (Vendor-Defined 2)
	0x75, 0x08,					//Report Size (8)
    0x95, 0x01,					//Report Count (1)
    0x91, 0x02,					//Output (Data,Var,Abs,NWrp,Lin,Pref,NNul,NVol,Bit)
	// 30 +18 = 48 Bytes
	0x85, REPORT_ID_CONFIG_OUT,  //REPORT_ID (3)
	0x75, 0x08,					//Report Size (8)
	0x95, 0x01,					//Report Count (1)
	0x09, 0x03,					//Usage (Vendor-Defined 3)
	0x81, 0x02,					//Input (Data,Var,Abs,NWrp,Lin,Pref,NNul,Bit)
	0x09, 0x03,					//Usage (Vendor-Defined 3)
	0x75, 0x08,					//Report Size (8)
	0x95, 0x40,					//Report Count (64)
	0x91, 0x02,					//Output (Data,Var,Abs,NWrp,Lin,Pref,NNul,NVol,Bit)
	//48 + 18 = 66 Bytes
	0xC0 						//End Collection
	// 67 Bytes

};


enum {
  IN_REPORT_SIZE = 12,   // 1 byte report id + 11-byte report
  OUT_REPORT_SIZE = 10,  // 1 byte report id + 9-byte report
};

__ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
{
  0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
  0x09, 0x00,                    // USAGE (Undefined)
  0xa1, 0x01,                    // COLLECTION (Application)

  0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
  0x26, 0xff, 0x00,              //   LOGICAL_MAXIMUM (255)

  // IN report

  0x85, 0x01,                    //   REPORT_ID (1)
  0x75, 0x08,                    //   REPORT_SIZE (8)
  0x95, IN_REPORT_SIZE-1,        //   REPORT_COUNT (this is the byte length)
  0x09, 0x00,                    //   USAGE (Undefined)
  0x81, 0x82,                    //   INPUT (Data,Var,Abs,Vol)

  // OUT report

  0x85, 0x02,                    //   REPORT_ID (2)
  0x75, 0x08,                    //   REPORT_SIZE (8)
  0x95, OUT_REPORT_SIZE-1,       //   REPORT_COUNT (this is the byte length)
  0x09, 0x00,                    //   USAGE (Undefined)
  0x91, 0x82,                    //   OUTPUT (Data,Var,Abs,Vol)

  0xc0                           // END_COLLECTION
};

=================================
/** Usb CUSTOM HID report descriptor. */
__ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
{
		0x06, 0x00, 0xFF,  // Usage Page (Vendor Defined 0xFF00)
		0x09, 0x01,        // Usage (0x01)
		0xA1, 0x01,        // Collection (Application)
		0x15, 0x00,        //   Logical Minimum (0)
		0x26, 0xFF, 0x00,  //   Logical Maximum (255)
		//0x85, 0x01, 	   //REPORT_ID (1)
		0x75, 0x08,        //   Report Size (8)
		0x95, 0x40,        //   Report Count (64)
		0x09, 0x01,        //   Usage (0x01)
		0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
		0x95, 0x40, 	   //   Report Count (64)
		0x09, 0x01,        //   Usage (0x01)
		0x91, 0x02,        //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
		0xC0,              // End Collection
		/* 27 */
};

#define HID_INPUT_LENGTH 64
#define HID_OUTPUT_LENGTH 64
#define HID_FEATURE_LENGTH 1024
#define LEW(x) (x) & 0xFF, (x) >> 8

/** Usb CUSTOM HID report descriptor. */
__ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
{
0x06, 0x00, 0xff, // USAGE_PAGE (Vendor Defined Page 1)
0x09, 0x01, // USAGE (Vendor Usage 1)
0xa1, 0x01, // COLLECTION (Application)
0x15, 0x00, // LOGICAL_MINIMUM (0)
0x26, 0xff, 0x00, // LOGICAL_MAXIMUM (255)
0x75, 0x08, // REPORT_SIZE (8)
0x95, HID_INPUT_LENGTH, // REPORT_COUNT (64)
0x09, 0x01, // USAGE (Vendor Usage 1)
0x81, 0x02, // INPUT (Data,Var,Abs)
0x95, HID_OUTPUT_LENGTH, // REPORT_COUNT (64)
0x09, 0x01, // USAGE (Vendor Usage 1)
0x91, 0x02, // OUTPUT (Data,Var,Abs)
0x96, LEW(HID_FEATURE_LENGTH), // REPORT_COUNT (1024)
0x09, 0x01, // USAGE (Vendor Usage 1)
0xb1, 0x02, // FEATURE (Data,Var,Abs)
0xc0 // END_COLLECTION
};
